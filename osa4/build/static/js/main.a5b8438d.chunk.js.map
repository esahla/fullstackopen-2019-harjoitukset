{"version":3,"sources":["components/Note.js","components/Notification.js","services/notes.js","App.js","index.js"],"names":["Note","_ref","note","toggleImportance","deleteNote","label","important","react_default","a","createElement","className","content","onClick","Notification","message","services_notes","axios","get","then","response","data","newObject","post","id","put","concat","delete","Footer","style","color","fontStyle","fontSize","App","_useState","useState","_useState2","Object","slicedToArray","notes","setNotes","_useState3","_useState4","newNote","setNewNote","_useState5","_useState6","showAll","setShowAll","_useState7","_useState8","isImportant","setImportance","_useState9","_useState10","errorMessage","setErrorMessage","notesToShow","filter","useEffect","noteService","initialNotes","handleCheckboxChange","event","components_Notification","map","components_Note","key","find","n","changedNote","objectSpread","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","preventDefault","noteObject","date","Date","toISOString","value","onChange","target","placeholder","disabled","type","checked","htmlFor","length","App_Footer","ReactDOM","render","src_App","document","getElementById"],"mappings":"6MAaeA,EAXF,SAAAC,GAA4C,IAAzCC,EAAyCD,EAAzCC,KAAMC,EAAmCF,EAAnCE,iBAAkBC,EAAiBH,EAAjBG,WAChCC,EAAQH,EAAKI,UAAY,qBAAuB,iBACtD,OACEC,EAAAC,EAAAC,cAAA,MAAIC,UAAWR,EAAKI,UAAY,YAAc,WAC7CJ,EAAKS,QACNJ,EAAAC,EAAAC,cAAA,UAAQG,QAAST,GAAmBE,GACpCE,EAAAC,EAAAC,cAAA,UAAQG,QAASR,GAAjB,YCMWS,EAZM,SAAAZ,GAAiB,IAAda,EAAcb,EAAda,QACpB,OAAgB,OAAZA,EACO,KAGHP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACVI,oBCiBFC,EApBA,WAEX,OADgBC,IAAMC,IAHX,cAIIC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,QAkB9BL,EAfE,SAACM,GAEd,OADgBL,IAAMM,KARX,aAQyBD,GACrBH,KAAK,SAAAC,GAAQ,OAAIA,EAASC,QAa9BL,EAVE,SAACQ,EAAIF,GAElB,OADgBL,IAAMQ,IAAN,GAAAC,OAbL,aAaK,KAAAA,OAAwBF,GAAMF,GAC/BH,KAAK,SAAAC,GAAQ,OAAIA,EAASC,QAQ9BL,EALA,SAACQ,GAEZ,OADgBP,IAAMU,OAAN,GAAAD,OAlBL,aAkBK,KAAAA,OAA2BF,IAC5BL,KAAK,SAAAC,GAAQ,OAAIA,EAASC,QCjBvCO,EAAS,WAOb,OACEpB,EAAAC,EAAAC,cAAA,OAAKmB,MAPa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,KAKRxB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,sCA8ISuB,EAzIH,WAAM,IAAAC,EACUC,mBAAS,IADnBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACTK,EADSH,EAAA,GACFI,EADEJ,EAAA,GAAAK,EAEcN,mBAAS,IAFvBO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAETE,EAFSD,EAAA,GAEAE,EAFAF,EAAA,GAAAG,EAGcV,oBAAS,GAHvBW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAGTE,EAHSD,EAAA,GAGAE,EAHAF,EAAA,GAAAG,EAIqBd,oBAAS,GAJ9Be,EAAAb,OAAAC,EAAA,EAAAD,CAAAY,EAAA,GAITE,EAJSD,EAAA,GAIIE,EAJJF,EAAA,GAAAG,EAKwBlB,mBAAS,MALjCmB,EAAAjB,OAAAC,EAAA,EAAAD,CAAAgB,EAAA,GAKTE,EALSD,EAAA,GAKKE,EALLF,EAAA,GAMVG,EAAcV,EAAUR,EAAQA,EAAMmB,OAAO,SAAAvD,GAAI,OAAuB,IAAnBA,EAAKI,YAEhEoD,oBAAU,WACRC,IAEGzC,KAAK,SAAA0C,GACJrB,EAASqB,MAEZ,IAEH,IA0EMC,EAAuB,SAACC,GAC5BX,GAAeD,IAsBjB,OACE3C,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAACsD,EAAD,CAAcjD,QAASwC,IACvB/C,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQG,QAAS,kBAAMmC,GAAYD,KAAnC,eACSA,EAAU,qBAAiB,UAEpCvC,EAAAC,EAAAC,cAAA,UAAKqC,EAAU,SAAW,2BAA1B,oBAEFvC,EAAAC,EAAAC,cAAA,UA9Ee+C,EAAYQ,IAAI,SAAA9D,GAAI,OACrCK,EAAAC,EAAAC,cAACwD,EAAD,CACEC,IAAKhE,EAAKqB,GACVrB,KAAMA,EACNC,iBAAkB,kBAjCK,SAACoB,GAC1B,IAAMrB,EAAOoC,EAAM6B,KAAK,SAAAC,GAAC,OAAIA,EAAE7C,KAAOA,IAChC8C,EAAWjC,OAAAkC,EAAA,EAAAlC,CAAA,GAAQlC,EAAR,CAAcI,WAAYJ,EAAKI,YAChDqD,EACUpC,EAAI8C,GACXnD,KAAK,SAAAqD,GACJhC,EAASD,EAAM0B,IAAI,SAAA9D,GAAI,OAAIA,EAAKqB,KAAOA,EAAKrB,EAAOqE,OAEpDC,MAAM,SAAAC,GACLlB,EAAe,iBAAA9B,OACIvB,EAAKS,QADT,6BAGf+D,WAAW,WACTnB,EAAgB,OACf,OAmBmBoB,CAAmBzE,EAAKqB,KAChDnB,WAAY,kBAhBImB,EAgBarB,EAAKqB,QAfpCoC,EACUpC,GACPL,KAAK,WAAQqB,EAASD,EAAMmB,OAAO,SAAAvD,GAAI,OAAIA,EAAKqB,KAAOA,OAHzC,IAACA,QA4FhBhB,EAAAC,EAAAC,cAAA,QAAMmE,SAxEM,SAACd,GACfA,EAAMe,iBACN,IAAMC,EAAa,CACjBnE,QAAS+B,EACTqC,MAAM,IAAIC,MAAOC,cACjB3E,UAAW4C,GAGbS,EACUmB,GACP5D,KAAK,SAAAqD,GACJhC,EAASD,EAAMb,OAAO8C,IACtB5B,EAAW,QA6DXpC,EAAAC,EAAAC,cAAA,SAAOyE,MAAOxC,EAASyC,SAzDJ,SAACrB,GACxBnB,EAAWmB,EAAMsB,OAAOF,QAwD+BG,YAAY,wBAC/D9E,EAAAC,EAAAC,cA3BS,WACb,MAAgB,KAAZiC,EAEAnC,EAAAC,EAAAC,cAAA,UAAQ6E,UAAQ,EAACC,KAAK,UAAtB,YAKFhF,EAAAC,EAAAC,cAAA,UAAQ8E,KAAK,UAAb,aAmBE,MACAhF,EAAAC,EAAAC,cAnCY,kBAChBF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAO+E,QAAStC,EAAaqC,KAAK,WAAWhE,GAAG,YAAY4D,SAAUtB,IACtEtD,EAAAC,EAAAC,cAAA,SAAOgF,QAAQ,aAAf,+BAgCE,MACAlF,EAAAC,EAAAC,cAxDW,WACf,MAAgB,KAAZiC,EAEAnC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,4DAMJF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAI6B,EAAMoD,OAAS,EAAnB,oBAAuChD,EAAvC,OA6CA,OAEFnC,EAAAC,EAAAC,cAACkF,EAAD,cCpJNC,IAASC,OAAOtF,EAAAC,EAAAC,cAACqF,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.a5b8438d.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Note = ({ note, toggleImportance, deleteNote }) => {\r\n  const label = note.important ? 'make not important' : 'make important'\r\n  return (\r\n    <li className={note.important ? 'important' : 'regular'}>\r\n    {note.content}\r\n    <button onClick={toggleImportance}>{label}</button>\r\n    <button onClick={deleteNote}>Delete</button>\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default Note\r\n\r\n","import React from 'react'\r\n\r\nconst Notification = ({ message }) => {\r\n    if (message === null) {\r\n        return null\r\n    } else {\r\n        return (\r\n            <div className=\"error\">\r\n                {message}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Notification","import axios from 'axios'\r\n//const baseUrl = 'http://localhost:3001/notes'\r\n//const baseUrl = 'https://limitless-ocean-31704.herokuapp.com/notes'\r\nconst baseUrl ='/api/notes'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n  }\r\n  \r\n  const create = (newObject) => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n  }\r\n  \r\n  const update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n  }\r\n\r\nconst remove = (id) => {\r\n    const request = axios.delete(`${baseUrl}/${id}`)\r\n    return request.then(response => response.data)\r\n  }\r\n\r\nexport default { \r\n  getAll: getAll, \r\n  create: create, \r\n  update: update,\r\n  remove: remove\r\n}","import React, { useState, useEffect } from 'react'\r\nimport Note from './components/Note'\r\nimport Notification from './components/Notification'\r\nimport noteService from './services/notes'\r\n\r\nconst Footer = () => {\r\n  const footerStyle = {\r\n    color: 'green',\r\n    fontStyle: 'italic',\r\n    fontSize: 12\r\n  }\r\n\r\n  return (\r\n    <div style={footerStyle}>\r\n      <br />\r\n      <hr />\r\n      <em>Note app, esahla, 2019</em>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst App = () => {\r\n  const [notes, setNotes] = useState([])\r\n  const [newNote, setNewNote] = useState('')\r\n  const [showAll, setShowAll] = useState(true)\r\n  const [isImportant, setImportance] = useState(false)\r\n  const [errorMessage, setErrorMessage] = useState(null)\r\n  const notesToShow = showAll ? notes : notes.filter(note => note.important === true)\r\n\r\n  useEffect(() => {\r\n    noteService\r\n      .getAll()\r\n      .then(initialNotes => {\r\n        setNotes(initialNotes)\r\n      })\r\n  }, [])\r\n\r\n  const toggleImportanceOf = (id) => {\r\n    const note = notes.find(n => n.id === id)\r\n    const changedNote = { ...note, important: !note.important }\r\n    noteService\r\n      .update(id, changedNote)\r\n      .then(returnedNote => {\r\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\r\n      })\r\n      .catch(error => {\r\n        setErrorMessage(\r\n          `Muistiinpano '${note.content}' poistettu palvelimelta`\r\n        )\r\n        setTimeout(() => {\r\n          setErrorMessage(null)\r\n        }, 5000)\r\n      })\r\n  }\r\n\r\n  const deleteNote = (id) => {\r\n    noteService\r\n      .remove(id)\r\n      .then(() => { setNotes(notes.filter(note => note.id !== id)) })\r\n    //Note: tätä voi käyttää jos haluaa varmasti viimeisimmän tilan:\r\n    /*      .then(() => axios.get('http://localhost:3001/notes')\r\n            .then(response => {\r\n              setNotes(response.data)\r\n            })) */\r\n  }\r\n\r\n  const rows = () => notesToShow.map(note =>\r\n    <Note\r\n      key={note.id}\r\n      note={note}\r\n      toggleImportance={() => toggleImportanceOf(note.id)}\r\n      deleteNote={() => deleteNote(note.id)}\r\n    />\r\n  )\r\n\r\n  const addNote = (event) => {\r\n    event.preventDefault() // Estetään \"default\" toiminta\r\n    const noteObject = { // Luodaan objekti joka sisältää tarvittavat tiedot, kuten:\r\n      content: newNote, // - Käyttöliittymässä annetun muistiinpanon\r\n      date: new Date().toISOString(), // - Aikaleiman\r\n      important: isImportant, // - Randomisti important-flagin\r\n    }\r\n\r\n    noteService\r\n      .create(noteObject)\r\n      .then(returnedNote => {\r\n        setNotes(notes.concat(returnedNote))\r\n        setNewNote('')\r\n      })\r\n  }\r\n\r\n  const handleNoteChange = (event) => {\r\n    setNewNote(event.target.value)\r\n  }\r\n\r\n  const Feedback = () => {\r\n    if (newNote === '') {\r\n      return (\r\n        <div>\r\n          <p>Palautekenttä on tyhjä. Kirjoita jotain.</p>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <p>{notes.length + 1}. muistiinpano: \"{newNote}\"</p>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const handleCheckboxChange = (event) => {\r\n    setImportance(!isImportant)\r\n  }\r\n\r\n  const Important = () => (\r\n    <div>\r\n      <input checked={isImportant} type=\"checkbox\" id=\"important\" onChange={handleCheckboxChange} />\r\n      <label htmlFor=\"important\">Tärkeä muistiinpano</label>\r\n    </div>\r\n  )\r\n\r\n  const Button = () => {\r\n    if (newNote === '') {\r\n      return (\r\n        <button disabled type=\"submit\">tallenna</button>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <button type=\"submit\">tallenna</button>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Muistiinpanot</h1>\r\n      <Notification message={errorMessage} />\r\n      <div>\r\n        <button onClick={() => setShowAll(!showAll)}>\r\n          näytä {showAll ? 'vain tärkeät' : 'kaikki'}\r\n        </button>\r\n        <h3>{showAll ? 'Kaikki' : 'Ainoastaan tärkeät'} muistiinpanot:</h3>\r\n      </div>\r\n      <ul>\r\n        {rows()}\r\n      </ul>\r\n      <form onSubmit={addNote}>\r\n        <input value={newNote} onChange={handleNoteChange} placeholder='Tee muistiinpano...' />\r\n        <Button />\r\n        <Important />\r\n        <Feedback />\r\n      </form>\r\n      <Footer />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n/* import React, { useState } from 'react'\nimport ReactDOM from 'react-dom'\n\nconst Display = ({ counter }) => <div>{counter}</div>\nconst Button = ({ handleClick, text }) => <button onClick={handleClick}>{text}</button>\n\nconst App = () => {\n  const [counter, setCounter] = useState(0)\n  const setToValue = (value) => setCounter(value)\n\n  return (\n    <>\n      <Display counter={counter} />\n      <Button\n        handleClick={() => setToValue(counter + 1)}\n        text='Plus'\n      />\n      <Button\n        handleClick={() => setToValue(counter - 1)}\n        text='Minus'\n      />\n      <Button\n        handleClick={() => setToValue(0)}\n        text='Zero'\n      />\n    </>\n  )\n} */\n\n/* import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css';\n\nconst Hello = ({firstName, lastName, age}) => {\n    const bornYear = () => {\n        const yearNow = new Date().getFullYear()\n        return yearNow - age\n    }\n\n    return (\n      <div>\n        <p>Hello to {firstName} {lastName}, you are {age} years old.</p>\n        <p>You were born {bornYear()}</p>\n      </div>\n    )\n}\n\nconst Footer = () => {\n    return (\n      <div>\n        greeting app created by\n        <a href=\"https://github.com/esahla/\">esahla.</a>\n      </div>\n    )\n}\n\nconst App = () => {\n    const now = new Date()\n    const nimi = 'Pekka'\n    const ika = 10\n\n    return (\n      <>\n        <h2>Greetings!</h2s>\n        <p>Hello world, it's {now.toJSON()}</p>\n        <br/>\n        <Hello firstName={nimi} lastName=\"Kekkonen\" age={ika}/>\n        <Hello firstName=\"Kerkko\" lastName=\"Lollero\" age={ika}/>\n        <Hello firstName={nimi} lastName=\"Kekkonen\" age=\"99\"/>\n        <Footer />\n      </>\n    )\n}\n\nReactDOM.render(<App />, document.getElementById('root')) */"],"sourceRoot":""}